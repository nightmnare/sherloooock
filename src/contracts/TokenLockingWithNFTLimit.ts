/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers"
import { FunctionFragment, Result } from "@ethersproject/abi"
import { Listener, Provider } from "@ethersproject/providers"
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common"

export interface TokenLockingWithNFTLimitInterface extends utils.Interface {
  contractName: "TokenLockingWithNFTLimit"
  functions: {
    "CalculateReward(address)": FunctionFragment
    "CalculateTime(address)": FunctionFragment
    "EditLockReward(uint256)": FunctionFragment
    "EditLockingPeriod(uint256)": FunctionFragment
    "EditNFT(address)": FunctionFragment
    "EditRewardToken(address)": FunctionFragment
    "Limit()": FunctionFragment
    "LockingPeriod()": FunctionFragment
    "SetDepositToken(address)": FunctionFragment
    "Staked(address)": FunctionFragment
    "StakedTokens(address)": FunctionFragment
    "SweepToken(address)": FunctionFragment
    "VaultReward()": FunctionFragment
    "claim()": FunctionFragment
    "claimAndWithdraw()": FunctionFragment
    "deposit(uint256)": FunctionFragment
    "totalStaked()": FunctionFragment
  }

  encodeFunctionData(functionFragment: "CalculateReward", values: [string]): string
  encodeFunctionData(functionFragment: "CalculateTime", values: [string]): string
  encodeFunctionData(functionFragment: "EditLockReward", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "EditLockingPeriod", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "EditNFT", values: [string]): string
  encodeFunctionData(functionFragment: "EditRewardToken", values: [string]): string
  encodeFunctionData(functionFragment: "Limit", values?: undefined): string
  encodeFunctionData(functionFragment: "LockingPeriod", values?: undefined): string
  encodeFunctionData(functionFragment: "SetDepositToken", values: [string]): string
  encodeFunctionData(functionFragment: "Staked", values: [string]): string
  encodeFunctionData(functionFragment: "StakedTokens", values: [string]): string
  encodeFunctionData(functionFragment: "SweepToken", values: [string]): string
  encodeFunctionData(functionFragment: "VaultReward", values?: undefined): string
  encodeFunctionData(functionFragment: "claim", values?: undefined): string
  encodeFunctionData(functionFragment: "claimAndWithdraw", values?: undefined): string
  encodeFunctionData(functionFragment: "deposit", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "totalStaked", values?: undefined): string

  decodeFunctionResult(functionFragment: "CalculateReward", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "CalculateTime", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "EditLockReward", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "EditLockingPeriod", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "EditNFT", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "EditRewardToken", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "Limit", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "LockingPeriod", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "SetDepositToken", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "Staked", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "StakedTokens", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "SweepToken", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "VaultReward", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "claimAndWithdraw", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "totalStaked", data: BytesLike): Result

  events: {}
}

export interface TokenLockingWithNFTLimit extends BaseContract {
  contractName: "TokenLockingWithNFTLimit"
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: TokenLockingWithNFTLimitInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    CalculateReward(Who: string, overrides?: CallOverrides): Promise<[BigNumber]>

    CalculateTime(YourAddress: string, overrides?: CallOverrides): Promise<[BigNumber]>

    EditLockReward(
      HowManyTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    EditLockingPeriod(
      HowManyBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    EditNFT(WhatNFT: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    EditRewardToken(
      WhatToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    Limit(overrides?: CallOverrides): Promise<[BigNumber]>

    LockingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>

    SetDepositToken(
      WhatToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    Staked(arg0: string, overrides?: CallOverrides): Promise<[boolean]>

    StakedTokens(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    SweepToken(
      TokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    VaultReward(overrides?: CallOverrides): Promise<[BigNumber]>

    claim(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    claimAndWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  CalculateReward(Who: string, overrides?: CallOverrides): Promise<BigNumber>

  CalculateTime(YourAddress: string, overrides?: CallOverrides): Promise<BigNumber>

  EditLockReward(
    HowManyTokens: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  EditLockingPeriod(
    HowManyBlocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  EditNFT(WhatNFT: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  EditRewardToken(
    WhatToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  Limit(overrides?: CallOverrides): Promise<BigNumber>

  LockingPeriod(overrides?: CallOverrides): Promise<BigNumber>

  SetDepositToken(
    WhatToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  Staked(arg0: string, overrides?: CallOverrides): Promise<boolean>

  StakedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  SweepToken(
    TokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  VaultReward(overrides?: CallOverrides): Promise<BigNumber>

  claim(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  claimAndWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    CalculateReward(Who: string, overrides?: CallOverrides): Promise<BigNumber>

    CalculateTime(YourAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    EditLockReward(HowManyTokens: BigNumberish, overrides?: CallOverrides): Promise<void>

    EditLockingPeriod(HowManyBlocks: BigNumberish, overrides?: CallOverrides): Promise<void>

    EditNFT(WhatNFT: string, overrides?: CallOverrides): Promise<void>

    EditRewardToken(WhatToken: string, overrides?: CallOverrides): Promise<void>

    Limit(overrides?: CallOverrides): Promise<BigNumber>

    LockingPeriod(overrides?: CallOverrides): Promise<BigNumber>

    SetDepositToken(WhatToken: string, overrides?: CallOverrides): Promise<void>

    Staked(arg0: string, overrides?: CallOverrides): Promise<boolean>

    StakedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    SweepToken(TokenAddress: string, overrides?: CallOverrides): Promise<void>

    VaultReward(overrides?: CallOverrides): Promise<BigNumber>

    claim(overrides?: CallOverrides): Promise<void>

    claimAndWithdraw(overrides?: CallOverrides): Promise<void>

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {}

  estimateGas: {
    CalculateReward(Who: string, overrides?: CallOverrides): Promise<BigNumber>

    CalculateTime(YourAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    EditLockReward(
      HowManyTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    EditLockingPeriod(
      HowManyBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    EditNFT(WhatNFT: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    EditRewardToken(WhatToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    Limit(overrides?: CallOverrides): Promise<BigNumber>

    LockingPeriod(overrides?: CallOverrides): Promise<BigNumber>

    SetDepositToken(WhatToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    Staked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    StakedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    SweepToken(TokenAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    VaultReward(overrides?: CallOverrides): Promise<BigNumber>

    claim(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    claimAndWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    deposit(amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    CalculateReward(Who: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    CalculateTime(YourAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    EditLockReward(
      HowManyTokens: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    EditLockingPeriod(
      HowManyBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    EditNFT(WhatNFT: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    EditRewardToken(
      WhatToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    Limit(overrides?: CallOverrides): Promise<PopulatedTransaction>

    LockingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>

    SetDepositToken(
      WhatToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    Staked(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    StakedTokens(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    SweepToken(
      TokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    VaultReward(overrides?: CallOverrides): Promise<PopulatedTransaction>

    claim(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    claimAndWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
