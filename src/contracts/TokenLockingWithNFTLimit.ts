/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers"
import { FunctionFragment, Result } from "@ethersproject/abi"
import { Listener, Provider } from "@ethersproject/providers"
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common"

export interface TokenLockingWithNFTLimitInterface extends utils.Interface {
  contractName: "TokenLockingWithNFTLimit"
  functions: {
    "CalculateDailyReward(address)": FunctionFragment
    "CheckRewards(address)": FunctionFragment
    "EditEmission(uint256)": FunctionFragment
    "EditMinimumStakeTime(uint256)": FunctionFragment
    "EditNonFun(address)": FunctionFragment
    "EditToken(address)": FunctionFragment
    "EditWithdrawTime(uint256)": FunctionFragment
    "MinimumTime()": FunctionFragment
    "PendingReward(address)": FunctionFragment
    "RewardFactor()": FunctionFragment
    "Stake(uint256)": FunctionFragment
    "SweepToken(address)": FunctionFragment
    "TimeClaim(address)": FunctionFragment
    "TimeFactor(address)": FunctionFragment
    "TimeStaked(address)": FunctionFragment
    "TokensStaked(address)": FunctionFragment
    "Unstake(uint256)": FunctionFragment
    "WithdrawTime()": FunctionFragment
    "admin()": FunctionFragment
    "claimRewards()": FunctionFragment
    "displayTotalStaked()": FunctionFragment
    "user(uint256)": FunctionFragment
  }

  encodeFunctionData(functionFragment: "CalculateDailyReward", values: [string]): string
  encodeFunctionData(functionFragment: "CheckRewards", values: [string]): string
  encodeFunctionData(functionFragment: "EditEmission", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "EditMinimumStakeTime", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "EditNonFun", values: [string]): string
  encodeFunctionData(functionFragment: "EditToken", values: [string]): string
  encodeFunctionData(functionFragment: "EditWithdrawTime", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "MinimumTime", values?: undefined): string
  encodeFunctionData(functionFragment: "PendingReward", values: [string]): string
  encodeFunctionData(functionFragment: "RewardFactor", values?: undefined): string
  encodeFunctionData(functionFragment: "Stake", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "SweepToken", values: [string]): string
  encodeFunctionData(functionFragment: "TimeClaim", values: [string]): string
  encodeFunctionData(functionFragment: "TimeFactor", values: [string]): string
  encodeFunctionData(functionFragment: "TimeStaked", values: [string]): string
  encodeFunctionData(functionFragment: "TokensStaked", values: [string]): string
  encodeFunctionData(functionFragment: "Unstake", values: [BigNumberish]): string
  encodeFunctionData(functionFragment: "WithdrawTime", values?: undefined): string
  encodeFunctionData(functionFragment: "admin", values?: undefined): string
  encodeFunctionData(functionFragment: "claimRewards", values?: undefined): string
  encodeFunctionData(functionFragment: "displayTotalStaked", values?: undefined): string
  encodeFunctionData(functionFragment: "user", values: [BigNumberish]): string

  decodeFunctionResult(functionFragment: "CalculateDailyReward", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "CheckRewards", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "EditEmission", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "EditMinimumStakeTime", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "EditNonFun", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "EditToken", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "EditWithdrawTime", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "MinimumTime", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "PendingReward", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "RewardFactor", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "Stake", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "SweepToken", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "TimeClaim", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "TimeFactor", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "TimeStaked", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "TokensStaked", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "Unstake", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "WithdrawTime", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "claimRewards", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "displayTotalStaked", data: BytesLike): Result
  decodeFunctionResult(functionFragment: "user", data: BytesLike): Result

  events: {}
}

export interface TokenLockingWithNFTLimit extends BaseContract {
  contractName: "TokenLockingWithNFTLimit"
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: TokenLockingWithNFTLimitInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    CalculateDailyReward(YourAddress: string, overrides?: CallOverrides): Promise<[BigNumber]>

    CheckRewards(YourAddress: string, overrides?: CallOverrides): Promise<[BigNumber]>

    EditEmission(
      BPSperDay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    EditMinimumStakeTime(
      HowManyBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    EditNonFun(
      WhatERC721: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    EditToken(
      WhatToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    EditWithdrawTime(
      HowManyBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    MinimumTime(overrides?: CallOverrides): Promise<[BigNumber]>

    PendingReward(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    RewardFactor(overrides?: CallOverrides): Promise<[BigNumber]>

    Stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    SweepToken(
      TokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    TimeClaim(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    TimeFactor(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    TimeStaked(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    TokensStaked(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    Unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    WithdrawTime(overrides?: CallOverrides): Promise<[BigNumber]>

    admin(overrides?: CallOverrides): Promise<[string]>

    claimRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    displayTotalStaked(overrides?: CallOverrides): Promise<[BigNumber]>

    user(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>
  }

  CalculateDailyReward(YourAddress: string, overrides?: CallOverrides): Promise<BigNumber>

  CheckRewards(YourAddress: string, overrides?: CallOverrides): Promise<BigNumber>

  EditEmission(
    BPSperDay: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  EditMinimumStakeTime(
    HowManyBlocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  EditNonFun(
    WhatERC721: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  EditToken(
    WhatToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  EditWithdrawTime(
    HowManyBlocks: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  MinimumTime(overrides?: CallOverrides): Promise<BigNumber>

  PendingReward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  RewardFactor(overrides?: CallOverrides): Promise<BigNumber>

  Stake(amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  SweepToken(
    TokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  TimeClaim(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  TimeFactor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  TimeStaked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  TokensStaked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  Unstake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  WithdrawTime(overrides?: CallOverrides): Promise<BigNumber>

  admin(overrides?: CallOverrides): Promise<string>

  claimRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  displayTotalStaked(overrides?: CallOverrides): Promise<BigNumber>

  user(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>

  callStatic: {
    CalculateDailyReward(YourAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    CheckRewards(YourAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    EditEmission(BPSperDay: BigNumberish, overrides?: CallOverrides): Promise<void>

    EditMinimumStakeTime(HowManyBlocks: BigNumberish, overrides?: CallOverrides): Promise<void>

    EditNonFun(WhatERC721: string, overrides?: CallOverrides): Promise<void>

    EditToken(WhatToken: string, overrides?: CallOverrides): Promise<void>

    EditWithdrawTime(HowManyBlocks: BigNumberish, overrides?: CallOverrides): Promise<void>

    MinimumTime(overrides?: CallOverrides): Promise<BigNumber>

    PendingReward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    RewardFactor(overrides?: CallOverrides): Promise<BigNumber>

    Stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    SweepToken(TokenAddress: string, overrides?: CallOverrides): Promise<void>

    TimeClaim(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    TimeFactor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    TimeStaked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    TokensStaked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    Unstake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    WithdrawTime(overrides?: CallOverrides): Promise<BigNumber>

    admin(overrides?: CallOverrides): Promise<string>

    claimRewards(overrides?: CallOverrides): Promise<void>

    displayTotalStaked(overrides?: CallOverrides): Promise<BigNumber>

    user(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>
  }

  filters: {}

  estimateGas: {
    CalculateDailyReward(YourAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    CheckRewards(YourAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    EditEmission(
      BPSperDay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    EditMinimumStakeTime(
      HowManyBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    EditNonFun(WhatERC721: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    EditToken(WhatToken: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    EditWithdrawTime(
      HowManyBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    MinimumTime(overrides?: CallOverrides): Promise<BigNumber>

    PendingReward(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    RewardFactor(overrides?: CallOverrides): Promise<BigNumber>

    Stake(amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    SweepToken(TokenAddress: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    TimeClaim(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    TimeFactor(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    TimeStaked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    TokensStaked(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    Unstake(amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    WithdrawTime(overrides?: CallOverrides): Promise<BigNumber>

    admin(overrides?: CallOverrides): Promise<BigNumber>

    claimRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    displayTotalStaked(overrides?: CallOverrides): Promise<BigNumber>

    user(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    CalculateDailyReward(YourAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    CheckRewards(YourAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    EditEmission(
      BPSperDay: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    EditMinimumStakeTime(
      HowManyBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    EditNonFun(
      WhatERC721: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    EditToken(
      WhatToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    EditWithdrawTime(
      HowManyBlocks: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    MinimumTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    PendingReward(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    RewardFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>

    Stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    SweepToken(
      TokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    TimeClaim(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    TimeFactor(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    TimeStaked(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    TokensStaked(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    Unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    WithdrawTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>

    claimRewards(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    displayTotalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>

    user(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
